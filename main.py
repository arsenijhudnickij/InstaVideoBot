import os
import logging
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from dotenv import load_dotenv

load_dotenv()
from queue_manager import task_queue, active_tasks
from worker import worker

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram-–±–æ—Ç–∞
bot = Bot(token=os.getenv("TELEGRAM_BOT_TOKEN"))
dp = Dispatcher()

# –ß–∏—Ç–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ .env
REQUIRED_CHANNELS = os.getenv("TG_CHANNELS", "").split(",")


async def check_subscription(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã"""
    for channel in REQUIRED_CHANNELS:
        ch = channel.strip()
        if not ch:
            continue
        try:
            member = await bot.get_chat_member(ch, user_id)
            if member.status not in ("creator", "administrator", "member"):
                return False
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É {user_id} –Ω–∞ {ch}: {e}")
            return False
    return True


@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    text = "üëã –ü—Ä–∏–≤–µ—Ç!\n\n"
    text += "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ Instagram –ø–æ—Å—Ç –∏–ª–∏ Reels, –∏ —è –ø—Ä–∏—à–ª—é —Ç–µ–±–µ –≤–∏–¥–µ–æ.\n\n"

    if any(REQUIRED_CHANNELS):
        text += "‚ö†Ô∏è –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω—É–∂–Ω–æ –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã:\n\n"
        for ch in REQUIRED_CHANNELS:
            if ch.strip():
                text += f"üëâ {ch}\n"

        # –ö–Ω–æ–ø–∫–∞ "–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è"
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="check_subs")]
            ]
        )
        await message.reply(text, reply_markup=keyboard)
    else:
        await message.reply(text)


@dp.callback_query(F.data == "check_subs")
async def process_check_subs(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    is_subscribed = await check_subscription(user_id)

    if is_subscribed:
        await callback.message.answer("‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ Instagram.")
    else:
        await callback.message.answer("‚ö†Ô∏è –í—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    await callback.answer()  # —É–±–∏—Ä–∞–µ–º "—á–∞—Å–∏–∫–∏" –Ω–∞ –∫–Ω–æ–ø–∫–µ


@dp.message()
async def handle_message(message: types.Message):
    url = message.text.strip()

    if not any(domain in url for domain in ["instagram.com", "instagr.am"]):
        await message.reply("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ Instagram.")
        return

    user_id = message.from_user.id

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    is_subscribed = await check_subscription(user_id)
    if not is_subscribed:
        # ... (—Ç–≤–æ–π –∫–æ–¥ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π)
        return

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–∫—Ç–∏–≤–Ω—É—é –∑–∞–¥–∞—á—É
    if active_tasks.get(user_id):
        await message.reply("‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∫–∞ —è –æ–±—Ä–∞–±–æ—Ç–∞—é –≤–∞—à–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –≤–∏–¥–µ–æ.")
        return

    # —Å—Ç–∞–≤–∏–º –≤ –æ—á–µ—Ä–µ–¥—å
    active_tasks[user_id] = True
    await message.reply("‚è≥ –í–∏–¥–µ–æ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å‚Ä¶")
    await task_queue.put((message, url))

async def main():
    # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ—Ä–∫–µ—Ä–æ–≤
    workers = [asyncio.create_task(worker(bot, i)) for i in range(5)]

    await dp.start_polling(bot)

    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–æ—Ä–∫–µ—Ä–æ–≤ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
    for w in workers:
        w.cancel()


if __name__ == "__main__":
    asyncio.run(main())
