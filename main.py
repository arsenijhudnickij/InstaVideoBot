import os
import logging
import aiosqlite
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, BotCommand
from dotenv import load_dotenv
from datetime import datetime, timedelta

from queue_manager import task_queue, active_tasks, pending_requests
from worker import worker
from utils import check_subscription
from database import init_db, set_language, get_language, mark_active, get_daily_stats

load_dotenv()

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(token=os.getenv("TELEGRAM_BOT_TOKEN"))
dp = Dispatcher()

REQUIRED_CHANNELS = os.getenv("TG_CHANNELS", "").split(",")
DB_PATH = os.getenv("DB_PATH", "bot.db")
ADMINS = [int(x) for x in os.getenv("ADMINS", "").split(",") if x.strip()]

# -------- –°–æ–æ–±—â–µ–Ω–∏—è -------- #
MESSAGES = {
    "ru": {
        "welcome_first": (
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
            "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Å–∫–∞—á–∏–≤–∞—Ç—å –≤–∏–¥–µ–æ —Å Instagram üì≤\n"
            "–í—Å—ë –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç–æ: –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç, –∏ —è –ø–æ–¥–≥–æ—Ç–æ–≤–ª—é –¥–ª—è –≤–∞—Å –≤–∏–¥–µ–æ üé¨\n\n"
            "–û–∂–∏–¥–∞—é —Ç–≤–æ–∏—Ö —Å—Å—ã–ª–æ–∫ üëá"
        ),
        "lang_changed": "‚úÖ –Ø–∑—ã–∫ –∏–∑–º–µ–Ω—ë–Ω. –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ä–∞–±–æ—Ç—É!",
        "need_subs": "‚ö†Ô∏è –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –≤—Å–µ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏–µ –∫–∞–Ω–∞–ª—ã:\n\n",
        "btn_subscribed": "‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è",
        "send_url": "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ Instagram.",
        "wait_prev": "‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∫–∞ —è –æ–±—Ä–∞–±–æ—Ç–∞—é –≤–∞—à–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –≤–∏–¥–µ–æ.",
        "queued": "‚è≥ –í–∏–¥–µ–æ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å‚Ä¶",
        "ready": "‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ Instagram.",
    },
    "en": {
        "welcome_first": (
            "üëã Welcome!\n\n"
            "This bot helps you download videos from Instagram üì≤\n"
            "It‚Äôs simple: just send me a link to a post, and I‚Äôll fetch the video üé¨\n\n"
            "I'm waiting for your links üëá"
        ),
        "lang_changed": "‚úÖ Language changed. You can continue using the bot!",
        "need_subs": "‚ö†Ô∏è To continue, you must be subscribed to all partner channels:\n\n",
        "btn_subscribed": "‚úÖ I subscribed",
        "send_url": "‚ö†Ô∏è Please send a valid Instagram link.",
        "wait_prev": "‚è≥ Please wait until your previous video is processed.",
        "queued": "‚è≥ Your video has been added to the queue‚Ä¶",
        "ready": "‚úÖ Great! Now you can send an Instagram link.",
    }
}


async def get_lang(user_id: int) -> str:
    return await get_language(user_id)


# -------- –ú–µ–Ω—é –∫–æ–º–∞–Ω–¥ -------- #
async def set_bot_commands(bot: Bot):
    commands = [
        BotCommand(command="/lang", description="–°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫ / Change language"),
    ]
    await bot.set_my_commands(commands)


# ----------- –¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ ----------- #
async def show_subscription_requirements(message: types.Message):
    user_id = message.from_user.id
    lang = await get_lang(user_id)

    text = MESSAGES[lang]["need_subs"]
    for ch in REQUIRED_CHANNELS:
        if ch.strip():
            text += f"üëâ {ch}\n"

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text=MESSAGES[lang]["btn_subscribed"], callback_data="check_subs")]]
    )
    await message.reply(text, reply_markup=keyboard)


# --------- /start --------- #
@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute("SELECT 1 FROM users WHERE user_id=?", (user_id,)) as cur:
            exists = await cur.fetchone()

    if not exists:
        # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî —Å—Ä–∞–∑—É –ø—Ä–µ–¥–ª–æ–∂–∏–º –≤—ã–±—Ä–∞—Ç—å —è–∑—ã–∫
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[
                InlineKeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="set_lang_ru"),
                InlineKeyboardButton(text="üá¨üáß English", callback_data="set_lang_en")
            ]]
        )
        await message.reply("üåé –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose your language:", reply_markup=keyboard)
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
        async with aiosqlite.connect(DB_PATH) as db:
            await db.execute("INSERT INTO users (user_id) VALUES (?)", (user_id,))
            await db.commit()
    else:
        # –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî –±–µ—Ä—ë–º —è–∑—ã–∫ –∏–∑ –±–∞–∑—ã
        lang = await get_language(user_id)
        await mark_active(user_id)
        await message.reply(MESSAGES[lang]["welcome_first"])

# --------- /lang --------- #
@dp.message(Command("lang"))
async def change_language(message: types.Message):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="set_lang_ru"),
             InlineKeyboardButton(text="üá¨üáß English", callback_data="set_lang_en")]
        ]
    )
    await message.answer("üåé –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose your language:", reply_markup=keyboard)


# --------- Callback: –≤—ã–±–æ—Ä —è–∑—ã–∫–∞ --------- #
@dp.callback_query(F.data.startswith("set_lang_"))
async def set_language_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    choice = callback.data.split("_")[-1]

    if choice not in ("ru", "en"):
        await callback.answer()
        return

    await set_language(user_id, choice)

    try:
        await callback.message.delete()
    except:
        pass

    await callback.message.answer(MESSAGES[choice]["lang_changed"])
    await callback.answer()


# --------- Callback: –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ --------- #
@dp.callback_query(F.data == "check_subs")
async def process_check_subs(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    lang = await get_lang(user_id)

    is_subscribed = await check_subscription(bot, user_id, REQUIRED_CHANNELS)
    if is_subscribed:
        try:
            await callback.message.edit_reply_markup(reply_markup=None)
        except:
            pass

        pending = pending_requests.pop(user_id, None)
        if pending:
            orig_message, url = pending
            if user_id in active_tasks:
                await callback.message.answer(MESSAGES[lang]["wait_prev"])
            else:
                queued_msg = await orig_message.reply(MESSAGES[lang]["queued"])
                active_tasks[user_id] = queued_msg
                await task_queue.put((orig_message, url))
        else:
            await callback.message.answer(MESSAGES[lang]["ready"])
    else:
        pending = pending_requests.get(user_id)
        if pending:
            orig_message, _ = pending
            await show_subscription_requirements(orig_message)
        else:
            await show_subscription_requirements(callback.message)

    await callback.answer()


# --------- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–æ–∫ --------- #
@dp.message()
async def handle_message(message: types.Message):
    user_id = message.from_user.id
    lang = await get_lang(user_id)
    await mark_active(user_id)
    url = message.text.strip()

    if not any(domain in url for domain in ["instagram.com", "instagr.am"]):
        await message.reply(MESSAGES[lang]["send_url"])
        return

    if user_id in active_tasks:
        await message.reply(MESSAGES[lang]["wait_prev"])
        return

    is_subscribed = await check_subscription(bot, user_id, REQUIRED_CHANNELS)
    if is_subscribed:
        queued_msg = await message.reply(MESSAGES[lang]["queued"])
        active_tasks[user_id] = queued_msg
        await task_queue.put((message, url))
    else:
        pending_requests[user_id] = (message, url)
        await show_subscription_requirements(message)


# --------- –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ --------- #
async def daily_stats_task():
    while True:
        now = datetime.now()
        tomorrow = (now + timedelta(days=1)).replace(hour=0, minute=0, second=0, microsecond=0)
        wait_seconds = (tomorrow - now).total_seconds()
        await asyncio.sleep(wait_seconds)

        users_today, videos_today = await get_daily_stats()
        text = f"üìä Daily stats:\nüë• Users: {users_today}\nüé¨ Videos: {videos_today}"

        for admin_id in ADMINS:
            try:
                await bot.send_message(admin_id, text)
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–¥–º–∏–Ω—É {admin_id}: {e}")


# --------- –ó–∞–ø—É—Å–∫ --------- #
async def main():
    await init_db(DB_PATH)
    await set_bot_commands(bot)

    workers = [asyncio.create_task(worker(bot, i, REQUIRED_CHANNELS)) for i in range(5)]
    asyncio.create_task(daily_stats_task())

    await dp.start_polling(bot)

    for w in workers:
        w.cancel()


if __name__ == "__main__":
    asyncio.run(main())
