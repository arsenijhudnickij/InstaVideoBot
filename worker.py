import asyncio
import logging
import time
import os
import tempfile
from aiogram.types import FSInputFile, URLInputFile
from downloader import get_video_url
from queue_manager import task_queue, active_tasks
import yt_dlp

logger = logging.getLogger(__name__)

async def worker(bot, worker_id: int):
    while True:
        message, url = await task_queue.get()
        start_time = time.perf_counter()

        try:
            video_url, ext = get_video_url(url)
            if not video_url:
                await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∏–¥–µ–æ. –í–æ–∑–º–æ–∂–Ω–æ —Å—Å—ã–ª–∫–∞ –Ω–µ–≤–µ—Ä–Ω–∞.")
                continue

            caption = "–í–æ—Ç –≤–∞—à–µ –≤–∏–¥–µ–æ üé¨"

            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –æ—Ç–¥–∞—Ç—å –ø–æ URL (–±—ã—Å—Ç—Ä–æ, –±–µ–∑ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è)
            try:
                await message.reply_video(URLInputFile(video_url), caption=caption)
                logger.info(f"[Worker {worker_id}] ‚úÖ –í–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ URL: {url}")
            except Exception as e:
                logger.warning(f"[Worker {worker_id}] ‚ö†Ô∏è –û—à–∏–±–∫–∞ URL {e}, –∫–∞—á–∞–µ–º —Ñ–∞–π–ª")

                with tempfile.TemporaryDirectory(prefix="igdl_") as tmpdir:
                    ydl_opts = {
                        "outtmpl": os.path.join(tmpdir, "%(id)s.%(ext)s"),
                        "format": "best[ext=mp4]/bestvideo[ext=mp4]+bestaudio/best",
                        "noplaylist": True,
                        "quiet": True,
                        "no_warnings": True,
                    }
                    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                        info = ydl.extract_info(url, download=True)
                        filepath = ydl.prepare_filename(info)

                    await message.reply_video(FSInputFile(filepath), caption=caption)
                    logger.info(f"[Worker {worker_id}] ‚úÖ –í–∏–¥–µ–æ —Å–∫–∞—á–∞–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {url}")

        except Exception as e:
            logger.error(f"[Worker {worker_id}] ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {url}: {e}")
            await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ.")
        finally:
            elapsed = time.perf_counter() - start_time
            logger.info(f"[Worker {worker_id}] ‚è± {url} –∑–∞ {elapsed:.2f} —Å–µ–∫")
            task_queue.task_done()
            active_tasks.pop(message.from_user.id, None)
