import logging
import time
from aiogram.types import URLInputFile
from instagram_api import get_instagram_video
from queue_manager import task_queue, active_tasks
from utils import check_subscription
from database import get_language

logger = logging.getLogger(__name__)


async def worker(bot, worker_id: int, required_channels: list[str]):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤–æ—Ä–∫–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å –≤–∏–¥–µ–æ.
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç (message, url).
    –í finally —É–¥–∞–ª—è–µ—Ç queued-—Å–æ–æ–±—â–µ–Ω–∏–µ (–µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ) –∏–∑ active_tasks.
    """
    while True:
        message, url = await task_queue.get()
        start_time = time.perf_counter()
        user_id = message.from_user.id

        try:
            lang = await get_language(user_id)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
            is_subscribed = await check_subscription(bot, user_id, required_channels)
            if not is_subscribed:
                from main import show_subscription_requirements
                await show_subscription_requirements(message)
                continue

            # –ü–æ–ª—É—á–∞–µ–º mp4 URL —á–µ—Ä–µ–∑ RapidAPI
            video_url = await get_instagram_video(url)
            if not video_url:
                msg = (
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∏–¥–µ–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É."
                    if lang == "ru"
                    else "‚ùå Could not retrieve the video. Try another link."
                )
                await message.reply(msg)
                continue

            caption = "–í–æ—Ç –≤–∞—à–µ –≤–∏–¥–µ–æ üé¨" if lang == "ru" else "Here is your video üé¨"
            await message.reply_video(URLInputFile(video_url), caption=caption)
            logger.info(f"[Worker {worker_id}] ‚úÖ –í–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ URL: {url}")

        except Exception as e:
            logger.error(f"[Worker {worker_id}] ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {url}: {e}")
            msg = (
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ." if lang == "ru" else "‚ùå Error while downloading video."
            )
            try:
                await message.reply(msg)
            except Exception:
                logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")

        finally:
            elapsed = time.perf_counter() - start_time
            logger.info(f"[Worker {worker_id}] ‚è± {url} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞ {elapsed:.2f} —Å–µ–∫")
            task_queue.task_done()

            queued_msg = active_tasks.pop(user_id, None)
            if queued_msg:
                try:
                    await bot.delete_message(queued_msg.chat.id, queued_msg.message_id)
                except Exception as e:
                    logger.debug(f"[Worker {worker_id}] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å queued_msg: {e}")
